[{"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/index.js":"1","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/App.js":"2","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/reportWebVitals.js":"3","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Home/Home.js":"4","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/Profile.js":"5","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/productsDetails/ProductDetails.js":"6","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/Register.js":"7","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/contact/contact.js":"8","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/about/about.js":"9","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Navigation/Toolbar/Toolbar.js":"10","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/addCrop/addCrop.js":"11","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Navigation/Footer/Footer.js":"12","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/updateCrop/updateCrop.js":"13","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/showCrop/showCrop.js":"14","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/utilities/history/history.js":"15","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/deleteCrop/deleteCrop.js":"16","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/News/news.js":"17","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/Login.js":"18","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/products.js":"19","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/FormSignUp.js":"20","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/FormSignIn.js":"21","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Home/corousal/corousal.js":"22","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/farmerProducts/farmerProducts.js":"23","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Home/userCounter/userCounter.js":"24","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/utilities/enums/userTypes.js":"25","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/useForm/useForm.js":"26","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/useForm/validateInfo.js":"27","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/productsDetails/ProductContent/ProductContent.js":"28","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/addCrop/useForm/validateInfo.js":"29","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/addCrop/useForm/useForm.js":"30","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/updateCrop/useForm/validateInfo.js":"31","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/showCrop/cropContent/cropContent.js":"32","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/updateCrop/useForm/useForm.js":"33","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/deleteCrop/useForm/useForm.js":"34","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/deleteCrop/useForm/validateInfo.js":"35","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/News/NewsFilter/NewsFilter.js":"36","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/ProductFilter/ProductFilter.js":"37","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/containers/hoc/Auxiliary/Auxiliary.js":"38","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/useForm/useForm.js":"39","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/useForm/validateInfo.js":"40","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/useForm/useForm.js":"41","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/useForm/validateInfo.js":"42","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/utilities/userData/userData.js":"43"},{"size":500,"mtime":1690711660289,"results":"44","hashOfConfig":"45"},{"size":3874,"mtime":1701236710983,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1690711660289,"results":"47","hashOfConfig":"45"},{"size":9116,"mtime":1690711660272,"results":"48","hashOfConfig":"45"},{"size":5121,"mtime":1690711660278,"results":"49","hashOfConfig":"45"},{"size":2850,"mtime":1690711660288,"results":"50","hashOfConfig":"45"},{"size":3443,"mtime":1690711660280,"results":"51","hashOfConfig":"45"},{"size":2645,"mtime":1690711660282,"results":"52","hashOfConfig":"45"},{"size":2029,"mtime":1690711660281,"results":"53","hashOfConfig":"45"},{"size":6056,"mtime":1690711660275,"results":"54","hashOfConfig":"45"},{"size":9523,"mtime":1690711660283,"results":"55","hashOfConfig":"45"},{"size":1541,"mtime":1690711660275,"results":"56","hashOfConfig":"45"},{"size":10192,"mtime":1690711660286,"results":"57","hashOfConfig":"45"},{"size":3586,"mtime":1690711660286,"results":"58","hashOfConfig":"45"},{"size":113,"mtime":1690711660290,"results":"59","hashOfConfig":"45"},{"size":10016,"mtime":1690711660284,"results":"60","hashOfConfig":"45"},{"size":2189,"mtime":1690711660277,"results":"61","hashOfConfig":"45"},{"size":3613,"mtime":1690711660273,"results":"62","hashOfConfig":"45"},{"size":4449,"mtime":1690711660287,"results":"63","hashOfConfig":"45"},{"size":4819,"mtime":1690711660280,"results":"64","hashOfConfig":"45"},{"size":2436,"mtime":1690711660273,"results":"65","hashOfConfig":"45"},{"size":2190,"mtime":1690711660272,"results":"66","hashOfConfig":"45"},{"size":1393,"mtime":1690711660278,"results":"67","hashOfConfig":"45"},{"size":2550,"mtime":1690711660273,"results":"68","hashOfConfig":"45"},{"size":81,"mtime":1690711660290,"results":"69","hashOfConfig":"45"},{"size":2715,"mtime":1690711660279,"results":"70","hashOfConfig":"45"},{"size":612,"mtime":1690711660279,"results":"71","hashOfConfig":"45"},{"size":1520,"mtime":1690711660288,"results":"72","hashOfConfig":"45"},{"size":747,"mtime":1690711660284,"results":"73","hashOfConfig":"45"},{"size":3793,"mtime":1690711660283,"results":"74","hashOfConfig":"45"},{"size":546,"mtime":1690711660287,"results":"75","hashOfConfig":"45"},{"size":1517,"mtime":1690711660285,"results":"76","hashOfConfig":"45"},{"size":3126,"mtime":1690711660287,"results":"77","hashOfConfig":"45"},{"size":2676,"mtime":1690711660285,"results":"78","hashOfConfig":"45"},{"size":546,"mtime":1690711660285,"results":"79","hashOfConfig":"45"},{"size":2053,"mtime":1690711660276,"results":"80","hashOfConfig":"45"},{"size":2117,"mtime":1690711660287,"results":"81","hashOfConfig":"45"},{"size":58,"mtime":1690711660289,"results":"82","hashOfConfig":"45"},{"size":2588,"mtime":1690711660281,"results":"83","hashOfConfig":"45"},{"size":947,"mtime":1690711660281,"results":"84","hashOfConfig":"45"},{"size":2708,"mtime":1690711660274,"results":"85","hashOfConfig":"45"},{"size":344,"mtime":1690711660274,"results":"86","hashOfConfig":"45"},{"size":97,"mtime":1690711660290,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1c7ocon",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"90"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/index.js",[],["196","197"],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/App.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/reportWebVitals.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Home/Home.js",["198","199","200","201","202","203","204","205","206","207","208","209","210"],"import classes from './Home.module.css';\nimport React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport swal from 'sweetalert'\nimport UserCounter from './userCounter/userCounter'\nimport Corousal from './corousal/corousal'\n\nclass Home extends Component \n{\n\n    state = {\n        crops: [],\n        count: null\n    }\n\n    componentDidMount()\n    {\n        fetch(`${process.env.REACT_APP_API_URL}/products/crops?pageNumber=1&pageSize=4`,{\n            method: 'GET',\n            headers: {\n                'content-type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(data => {\n            console.log(\"data\",data)\n            if(data.error){\n               return swal(data.error)\n            }\n            data =  data.products.slice(0,4)\n            this.setState({crops: data})\n        }).catch(e => {\n            console.log(\"error\",e)\n            swal(\"Unable to connect to the server\")\n        })\n\n    }\n\n    mouseOverHandler = () => {\n        const mrq = document.getElementById(\"mrq\")\n        mrq.stop()\n    }\n\n    mouseOutHandler = () => {\n        const mrq = document.getElementById(\"mrq\")\n        mrq.start()\n    }\n\n    render() {\n        return (\n             <>\n                <Corousal />\n                <div className={classes[\"crop-scheme-container\"]}>\n                    <div>\n                        <h1 style={{textAlign:'center',marginTop:'10px'}}>Popular Products</h1>\n                    <main className={classes.CardLayout}>\n                        {\n                            this.state.crops.map((crop,index) => {\n                            console.log(crop);\n                            //   break;\n                            //  console.log(crop.images[0].buffer)\n                            return (<div><article key={index}>\n                                <Link to={`/crop/${crop._id}`}>\n                                    <div className={classes.ImageContainer}>\n                                        <img src={`${process.env.REACT_APP_API_URL}${crop.images[0]}`} alt=\"tshirt photo\" />\n                                    </div>\n                                </Link>\n                                <div className={classes.content}>\n                                    <h3>{crop.crop}</h3>\n                                    <h4>{crop.amount}<span>KG</span></h4>\n                                    <h4>MRP: Rs {crop.price}.00/-</h4>\n                                </div>\n                            </article></div>);\n                            })\n                        }\n                    </main>\n                    {this.state.crops.length === 0 ? <div class=\"fa-5x\" style={{textAlign:\"center\"}}>  <i class=\"fas fa-spinner fa-spin\"></i></div> : null}  \n                    </div>\n                    <div className={classes[\"mrq-container\"]}>\n                        <h2 style={{textAlign:'center'}}>Agricultural Schemes</h2>\n                        <hr />\n                        <marquee id={\"mrq\"} height={\"300px\"} width={\"100%\"} behavior={\"scroll\"} direction={\"up\"} scrollAmount={\"4\"} onMouseOver={this.mouseOverHandler} onMouseOut={this.mouseOutHandler}>\n                            <ul>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://www.pmkisan.gov.in/\"} target={\"_blank\"}>Pradhan Mantri Kisan Maandhan Yojana</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://pmkmy.gov.in/\"} target={\"_blank\"}>Pradhan Mantri Kisan Scheme</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://krishijagran.com/news/how-to-apply-for-kisan-credit-card-online-check-step-by-step-process/\"} target={\"_blank\"}>Kisan Credit Card (KCC) Scheme</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://krishijagran.com/agriculture-world/pashu-kisan-credit-card-yojana-eligibility-benefits-loan-amount-necessary-documents-methods-to-apply/\"} target={\"_blank\"}>Pashu Kisan Credit Card Scheme</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://krishijagran.com/agriculture-world/how-farmers-can-get-rs-50000-per-hectare-for-organic-farming-under-paramparagat-krishi-vikas-yojana/\"} target={\"_blank\"}>Paramparagat Krishi Vikas Yojana (PKVY)</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} target={\"_blank\"}>Pradhan Mantri Krishi Sinchai Yojana (PMKSY)</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://krishijagran.com/animal-husbandry/dairy-entrepreneurship-development-scheme-how-farmers-can-get-loans-up-to-rs-20-lakh-under-this-scheme/\"} target={\"_blank\"}>Dairy Entrepreneurship Development Scheme</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"\"} target={\"_blank\"}>Mission Organic Value Chain Development in North Eastern Region (MOVCDNER) - implemented by INM Division</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://soilhealth.dac.gov.in/\"} target={\"_blank\"}>National Mission for Sustainable Agriculture (NMSA)</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                                <hr/>\n                                <li className={classes[\"scheme-container\"]}>\n                                    <p className={classes[\"scheme\"]}>\n                                        <a className={classes[\"link\"]} href={\"https://pmkmy.gov.in/\"} target={\"_blank\"}>Rainfed Area Development (RAD) - implemented by RFS Division</a>\n                                    </p>\n                                    <p className={classes[\"update\"]}>Last Update On: 12/03/21</p>\n                                </li>\n                            </ul>\n                        </marquee>\n                    </div>\n                </div>\n                <UserCounter />\n             </>\n        );\n    }\n}\n\nexport default Home;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/Profile.js",["211","212"],"import React, {useState} from 'react';\nimport useForm from './useForm/useForm'\nimport validate from './useForm/validateInfo'\nimport {Link} from 'react-router-dom';\nimport classes from './profile.module.css';\nimport FarmerProducts from './farmerProducts/farmerProducts'\n\nconst Profile = ({submitForm}) => {\n        const {handleChange,values,handleSubmit,errors,product} = useForm(submitForm,validate);\n        return (\n        <>\n            <div className={`${classes[\"register-container\"]} ${classes.check}`} >\n                <h1 style={{textAlign:\"center\"}}>PROFILE</h1><br />\n                <div className={classes[\"profile\"]}>\n                    <form onSubmit={handleSubmit} className={classes[\"form\"]}>\n                        <div>\n                            <label htmlFor=\"username\"  >\n                                <b style={{fontSize:'25px'}}>Username</b>\n                            </label>\n                            <input\n                                id=\"username\"\n                                type=\"text\"\n                                name=\"username\"\n                                className={classes[\"formInput\"]}\n                                placeholder=\"Enter your username\"\n                                value={values.username}\n                                onChange={handleChange}\n                            />\n                            {errors.username && <p className={classes[\"warning\"]}>{errors.username}</p>}\n                        </div>\n                        <div>\n                            <label htmlFor=\"email\" >\n                                <b style={{fontSize:'25px'}}>Email</b>\n                            </label>\n                            <input\n                                id=\"email\"\n                                type=\"email\"\n                                name=\"email\"\n                                className={classes[\"formInput\"]}\n                                placeholder=\"Enter your email\"\n                                value={values.email}\n                                onChange={handleChange}\n                                disabled\n                            />\n                            {errors.email && <p className={classes[\"warning\"]}>{errors.email}</p>}\n                        </div>\n                        <div>\n                            <label htmlFor=\"phoneNo\" >\n                                <b style={{fontSize:'25px'}}>Phone No</b>\n                            </label>\n                            <input\n                                id=\"phoneNo\"\n                                type=\"number\"\n                                name=\"phoneNo\"\n                                className={classes[\"formInput\"]}\n                                placeholder=\"Enter your Phone Number\"\n                                value={values.phoneNo}\n                                onChange={handleChange}\n                            />\n                            {errors.phoneNo && <p className={classes[\"warning\"]}>{errors.phoneNo}</p>}\n                        </div>\n                        <div>\n                            <label htmlFor=\"address\" >\n                                <b style={{fontSize:'25px'}}>Address</b>\n                            </label>\n                            <input\n                                id=\"address\"\n                                type=\"text\"\n                                name=\"address\"\n                                className={classes[\"formInput\"]}\n                                placeholder=\"Enter your Address\"\n                                value={values.address}\n                                onChange={handleChange}\n                            />\n                            {errors.address && <p className={classes[\"warning\"]}>{errors.address}</p>}\n                        </div>\n                        <div >\n                            <label htmlFor=\"pincode\" >\n                                <b style={{fontSize:'25px'}}>Pincode</b>\n                            </label>\n                            <input\n                                id=\"pincode\"\n                                type=\"text\"\n                                name=\"pincode\"\n                                className={classes[\"formInput\"]}\n                                placeholder=\"Enter your pincode\"\n                                value={values.pincode}\n                                onChange={handleChange}\n                            />\n                            {errors.pincode && <p className={classes[\"warning\"]}>{errors.pincode}</p>}\n                        </div>\n                        \n                        <div></div>\n                    </form>\n                    <button onClick={handleSubmit} type=\"submit\" className={classes[\"registerbtn\"]} style={{textAlign:\"center\",alignItems:'center',justifyContent:'center',marginLeft:'auto',marginRight:'auto'}}>\n                        Update\n                    </button>\n                </div>\n            </div>\n            <FarmerProducts product={product}/>\n            </>\n        );\n}\n\nexport default Profile;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/productsDetails/ProductDetails.js",["213"],"import React, { Component } from 'react';\nimport classes from './ProductDetails.module.css';\nimport CardContent from './ProductContent/ProductContent';\nimport swal from 'sweetalert';\n\nclass CardDetails extends Component{\n\n    state = {\n        x: 0,\n        crop: null,\n        farmer: null\n    }\n\n    goLeft = () => {\n       this.setState((preProps) => {\n        if(preProps.x === 0)\n        {\n            return {x:-100*(this.state.crop.images.length-1)}\n        }else{\n            return {x:preProps.x+100}\n        }\n       })\n    }\n\n    goRight = () => {\n        console.log(this.state.x);\n        this.setState((preProps) => {\n            if(preProps.x === -100*(this.state.crop.images.length-1))\n            {\n                return {x:0}\n            }else{\n                return {x:preProps.x-100}\n            }\n        })\n    }\n\n    componentDidMount(){\n        console.log(\"params id\",this.props.match.params.id)\n        fetch(`${process.env.REACT_APP_API_URL}/products/id`,{\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'Application/json'\n            },\n            body:JSON.stringify({\n                id: this.props.match.params.id\n            })\n        }).then(res => res.json())      \n        .then(async (data) => {\n            console.log(\"data\",data)\n            this.setState({crop: data.crop,farmer: data.farmer})\n            }).catch(e => {\n            console.log(\"error\",e)\n            swal(e);\n        })\n    }\n\n   render() {\n       return (\n           <>\n                {this.state.crop !== null ? (<>\n                    <div className={classes.slider}>\n                    {\n                        this.state.crop.images.map((item,index) => {\n                            console.log(\"index\",index)\n                            return (\n                                <div key={index} className={classes.slide}\n                                     style={{transform:`translateX(${this.state.x}%)`}}>\n                                    <img src={`${process.env.REACT_APP_API_URL}${item}`} className={classes.imageStyles}/>\n                                </div>\n                            )\n                        })\n                    }\n\n                <button className={classes.goLeft} onClick={this.goLeft}>\n                    <i class=\"fas fa-chevron-left\" style={{fontSize:'2vw',fontWeight:'bold'}}></i>\n                </button>\n                <button className={classes.goRight} onClick={this.goRight}>\n                    <i class=\"fas fa-chevron-right\" style={{fontSize:'2vw',fontWeight:'bold'}}></i>\n                </button>\n                </div>\n                <CardContent crop={this.state.crop} farmer={this.state.farmer}/></>) : <p style={{textAlign:'center',marginTop:'200px'}}>Waiting...</p>}\n            </>\n       );\n   }\n}\n\nexport default CardDetails;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/Register.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/contact/contact.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/about/about.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Navigation/Toolbar/Toolbar.js",["214","215","216","217"],"import React, { useState, useEffect } from 'react';\nimport Aux from '../../../containers/hoc/Auxiliary/Auxiliary';\nimport classes from './Toolbar.module.css';\nimport {AuthContext} from \"../../../App\";\nimport userTypes from './../../../utilities/enums/userTypes'\n\nfunction Toolbar(props){\n\n  const {state,dispatch} = React.useContext(AuthContext);\n\n  const [hamburger,setHamburger] = useState(true);\n  const [userType,setUserType] = useState(null);\n\n   const hamburgerHandler = (e) => {\n     console.log(\"hamburger click\",e)\n     setHamburger(!hamburger)\n   }\n\n   useEffect(() => {\n     dispatch({})\n     console.log(\"using effect\",state)\n   }, [hamburger])\n\n   useEffect(async () => {\n     console.log(\"usingeffectives\",state)\n     console.log(userType)\n     if(state.user && userType === null){\n         console.log(\"state,user\",JSON.parse(state.user).type)\n         setUserType(JSON.parse(state.user).type)\n     }\n   })\n\n        return(\n            <Aux>\n              {console.log(\"toolbar state\",state)}\n              {console.log(\"props\",props)}\n              {console.log(state.user)}\n              {state.user ? console.log(\"not null\",state.user.type) : null}\n              <div className={classes[\"header\"]}>\n                    <div className={classes[\"container\"]}>\n                        <input type=\"checkbox\" name=\"\" className={classes[\"check\"]} />\n                        \n                        <div className={classes[\"logo-container\"]}>\n                            {/* <img src={Logo} className={classes[\"logoImage\"]}></img> */}\n                            <h3 className={classes[\"logo\"]}>E-cofF</h3>\n                            <h1 className={classes[\"tagline\"]}>e-commerce for farmers</h1>\n                        </div>\n\n                        <div className={classes[\"nav-btn\"]}>\n                            <div className={classes[\"nav-links\"]}>\n                                <ul className={classes[\"ul\"]} onClick={hamburgerHandler}>\n                                    <li className={classes[\"nav-link\"]}>\n                                        <a href=\"/\" className={classes['a']}>Home</a>\n                                    </li>\n                                    {(state.user ? (userType === userTypes.FARMER  ? (<li className={classes[\"nav-link\"]} >\n                                        <a className={classes[\"a\"]} href=\"#\">Farmer<i className=\"fas fa-caret-down\"></i></a>\n                                        <div className={classes[\"dropdown\"]}>\n                                            <ul className={classes[\"ul\"]}>\n                                                <li className={classes[\"dropdown-link\"]}>\n                                                    <a className={classes[\"a\"]} href=\"/farmer/addCrop\">ADD Crop</a>\n                                                </li>\n                                                <li className={classes[\"dropdown-link\"]}>\n                                                    <a className={classes[\"a\"]} href=\"/farmer/updateCrop\">Update Crop</a>\n                                                </li>\n                                                <li className={classes[\"dropdown-link\"]}>\n                                                    <a className={classes[\"a\"]} href=\"/farmer/deleteCrop\">Delete Crop</a>\n                                                </li>\n                                                <div className={classes[\"arrow\"]}></div>\n                                            </ul>\n                                        </div>\n                                    </li>) : \"\") : \"\")}\n                                    <li className={classes[\"nav-link\"]} >\n                                        <a className={classes[\"a\"]} href=\"/products\">Products</a>\n                                    </li>\n                                    <li className={classes[\"nav-link\"]} >\n                                        <a className={classes[\"a\"]} href=\"/news\">News</a>\n                                    </li>\n                                    <li className={classes[\"nav-link\"]} >\n                                        <a className={classes[\"a\"]} href=\"/about\">About Us</a>\n                                    </li>\n                                    <li className={classes[\"nav-link\"]} >\n                                        <a className={classes[\"a\"]} href=\"/contact\">Contact Us</a>\n                                    </li>\n                                    {!(state.isAuthenticated) ? (<>\n                                      <li className={classes[\"nav-link\"]} >\n                                      <a className={classes[\"a\"]} href=\"/register\">Register</a>\n                                      </li>\n                                      <li className={classes[\"nav-link\"]} >\n                                          <a className={classes[\"a\"]} href=\"/login\">Login</a>\n                                      </li>\n                                   </> ) : (<>\n                                      <li className={classes[\"nav-link\"]} >\n                                        <a className={classes[\"a\"]} href=\"/profile\">Profile</a>\n                                      </li>\n                                      <li className={classes[\"nav-link\"]} >\n                                          <a className={classes[\"a\"]} href=\"/logout\">Logout</a>\n                                      </li>   \n                                   </> )}\n                                    \n                                </ul>\n                            </div>\n\n                     \n                        </div>\n\n                        <div className={classes[\"hamburger-menu-container\"]}>\n                            <div className={classes[\"hamburger-menu\"]} onClick={hamburgerHandler}>\n                                <div></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {props.children}\n            </Aux>\n        )\n}\n\nexport default Toolbar;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/addCrop/addCrop.js",["218","219","220"],"import React, {useEffect, useState} from 'react';\nimport useForm from './useForm/useForm'\nimport validate from './useForm/validateInfo'\nimport {Link} from 'react-router-dom';\nimport classes from './addCrop.module.css';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\n\nconst AddCrop = () => {\n\n        const submitForm = () => {\n            console.log(\"Submit Form\")\n        }\n\n        const [items,setItems] = useState([])\n        const [cropImage,setCropImage] = useState()\n\n        const {handleChange,values,handleSubmit,errors,disabled} = useForm(submitForm,validate);\n        \n        useEffect(() => {\n            fetch(`${process.env.REACT_APP_API_URL}/products/cropNames`,{\n                method: 'GET',\n                headers : {\n                  'Content-Type' : 'Application/json'\n                }\n            }).then(res => {\n                return res.json()\n            }).then(data => {\n                console.log(\"product data\",data);\n                setItems(data)\n            }).catch(e => {\n                alert(e);\n            })\n        },[])\n        \n        return (\n            <div className={`${classes[\"register-container\"]} ${classes.check}`} >\n                <form onSubmit={handleSubmit} className={classes[\"form\"]}>\n                    <h1 style={{textAlign:\"center\"}}>ADD CROP</h1>\n                    <hr className={classes[\"hr\"]}/>\n\n                    { \n                        cropImage && values.cropName &&\n                        <div className={classes[\"productImage\"]}>\n                            <img src={cropImage} />\n                        </div> \n                    }\n\n                    <div>\n                        <label htmlFor=\"cropName\"  >\n                             <b style={{fontSize:'25px'}}>Crop Name</b>\n                        </label>\n                        <br/>\n                        <Autocomplete\n                            className={classes[\"autocompleteFormInput\"]}\n                            value={values.cropName}\n                            onChange={(event, newValue) => {\n                                console.log(\"newValue\",newValue)\n                                if(newValue?.crop){\n                                    const crop = items.find((item) => {\n                                        return item.crop === newValue.crop\n                                    })\n                                    setCropImage(`${process.env.REACT_APP_API_URL}${crop.image}`)    \n                                }else{\n                                    setCropImage(\"\")\n                                }\n                                // if(newValue){\n                                handleChange(event,newValue?.crop,\"cropName\")\n                                // }\n                            }}\n                            name=\"cropName\"\n                            selectOnFocus\n                            clearOnBlur\n                            handleHomeEndKeys\n                            options={items}\n                            getOptionLabel={(option) => {\n                                // Value selected with enter, right from the input\n                                if (typeof option === 'string') {\n                                    return option;\n                                }\n                                // Add \"xxx\" option created dynamically\n                                if (option.inputValue) {\n                                    return option.inputValue;\n                                }\n                                // Regular option\n                                return option.crop;\n                            }}\n                            renderOption={(props, option) => <li {...props}>{option.crop}</li>}\n                            freeSolo\n                            renderInput={(params) => (\n                            <TextField {...params} label=\"Please Enter Crop Name\" variant=\"standard\"/>\n                            )}\n                        />\n                        {errors.cropName && <p className={classes[\"warning\"]}>{errors.cropName}</p>}\n                    </div>\n                    {/* <div>\n                        <label htmlFor=\"cropName\"  >\n                             <b style={{fontSize:'25px'}}>Crop Name</b>\n                        </label>\n                        <input\n                            id=\"cropName\"\n                            type=\"text\"\n                            name=\"cropName\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter the Crop Name\"\n                            value={values.cropName}\n                            onChange={handleChange}\n                        />\n                        {errors.cropName && <p className={classes[\"warning\"]}>{errors.cropName}</p>}\n                    </div> */}\n                    <div>\n                        <label htmlFor=\"weight\" >\n                             <b style={{fontSize:'25px'}}>Crop Weight (Kgs)</b>\n                        </label>\n                        <input\n                            id=\"weight\"\n                            type=\"number\"\n                            name=\"weight\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter the weight of the crop\"\n                            value={values.weight}\n                            onChange={handleChange}\n                        />\n                        {errors.weight && <p className={classes[\"warning\"]}>{errors.weight}</p>}\n                    </div>\n                    <div>\n                        <label htmlFor=\"price\" >\n                             <b style={{fontSize:'25px'}}>Price</b>\n                        </label>\n                        <input\n                            id=\"price\"\n                            type=\"number\"\n                            name=\"price\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter your price\"\n                            value={values.price}\n                            onChange={handleChange}\n                        />\n                        {errors.price && <p className={classes[\"warning\"]}>{errors.price}</p>}\n                    </div>\n                    <div >\n                        <label htmlFor=\"description\" >\n                             <b style={{fontSize:'25px'}}>Product Description</b>\n                        </label>\n                        <input\n                            id=\"description\"\n                            type=\"text\"\n                            name=\"description\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter the Product Description\"\n                            value={values.description}\n                            onChange={handleChange}\n                        />\n                        {errors.description && <p className={classes[\"warning\"]}>{errors.description}</p>}\n                    </div>\n                    <div >\n                        <label htmlFor=\"address\" >\n                             <b style={{fontSize:'25px'}}>Address</b>\n                        </label>\n                        <input\n                            id=\"address\"\n                            type=\"text\"\n                            name=\"address\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Address\"\n                            value={values.address}\n                            onChange={handleChange}\n                        />\n                        {errors.address && <p className={classes[\"warning\"]}>{errors.address}</p>}\n                    </div>\n                    <div >\n                        <label htmlFor=\"pincode\" >\n                             <b style={{fontSize:'25px'}}>Pincode</b>\n                        </label>\n                        <input\n                            id=\"pincode\"\n                            type=\"number\"\n                            name=\"pincode\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Pincode\"\n                            value={values.pincode}\n                            onChange={handleChange}\n                        />\n                        {errors.pincode && <p className={classes[\"warning\"]}>{errors.pincode}</p>}\n                    </div>\n                    {/* <div >\n                        <label htmlFor=\"images\" >\n                             <b style={{fontSize:'25px'}}>Images</b>\n                        </label>\n                        <input\n                            id=\"images\"\n                            type=\"file\"\n                            name=\"images\"\n                            accept=\".png, .jpg\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Images\"\n                            onChange={handleChange}\n                            multiple\n                        />\n                        {errors.images && <p className={classes[\"warning\"]}>{errors.images}</p>}\n                    </div> */}\n\n                    <button type=\"submit\" className={classes[\"registerbtn\"]} disabled={disabled}>\n                        Submit\n                    </button>\n\n                </form>\n            </div>\n        );\n}\n\nexport default AddCrop;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Navigation/Footer/Footer.js",["221","222","223","224"],"import React from 'react';\nimport classes from './Footer.module.css'\n\nconst Footer = () => {\n    return(<>\n            <footer className={classes[\"footer-distributed\"]}>\n\t\t\t<div className={classes[\"footer-left\"]}>\n\t\t\t\t<h3>E-coF</h3>\n\t\t\t\t<p className={classes[\"footer-links\"]}>\n\t\t\t\t\t<a href=\"/\" className={classes[\"link-1\"]}>Home</a>\n\t\t\t\t\t<a href=\"/products\">Products</a>\n\t\t\t\t\t<a href=\"/news\">News</a>\n\t\t\t\t\t<a href=\"/about\">About</a>\n\t\t\t\t\t<a href=\"/contact\">Contact</a>\n\t\t\t\t</p>\n\t\t\t\t<p className={classes[\"footer-company-name\"]}>Company Name © 2021</p>\n\t\t\t</div>\n\t\t\t<div className={classes[\"footer-center\"]}>\n\t\t\t\t<div>\n\t\t\t\t\t<i class=\"fa fa-map-marker\"></i>\n\t\t\t\t\t<p><span>NIT</span> Jalandhar, Punjab</p>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<i class=\"fa fa-phone\"></i>\n\t\t\t\t\t<p>+91 9999999999</p>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<i class=\"fa fa-envelope\"></i>\n\t\t\t\t\t<p><a href=\"mailto:support@company.com\">support@company.com</a></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={classes[\"footer-right\"]}>\n\t\t\t\t<p className={classes[\"footer-company-about\"]}>\n\t\t\t\t\t<span>About the company</span>\n                    It is an e-commerce website to provide a direct communication between the farmers and the buyers by removing the 3rd parties\n\t\t\t\t</p>\n\t\t\t\t<div className={classes[\"footer-icons\"]}>\n\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-facebook\"></i></a>\n\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-twitter\"></i></a>\n\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-linkedin\"></i></a>\n\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-github\"></i></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</footer>\n    </>)\n}\n\nexport default Footer;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/updateCrop/updateCrop.js",["225","226","227","228","229"],"import React, {useState,useEffect} from 'react';\nimport useForm from './useForm/useForm'\nimport validate from './useForm/validateInfo'\nimport {Link} from 'react-router-dom';\nimport classes from './updateCrop.module.css';\nimport Cookies from 'js-cookie'\nimport swal from 'sweetalert';\n\nconst UpdateCrop = ({match:{params}}) => {\n\n        const [cropId,setCropId] = useState(\"\")\n        const [paramCropId,setParamCropId] = useState(\"\")\n\n        useEffect(async() => {\n            console.log(\"Effect using\",params)\n            if(params.id && !cropId){\n                console.log(\"cropId\")\n                setCropId(params.id)\n                setParamCropId(params.id)\n                console.log(\"cr\",cropId)\n            }\n        });\n\n        useEffect(() => {\n            if(cropId !== \"\"){\n                searchHandler()\n            }\n        },[paramCropId])\n\n        const submitForm = () => {\n            console.log(\"Submit Form\")\n        }\n        const [search,setSearch] = useState(true);\n\n        const setTheSetSearch = () => {\n            setSearch(true)\n            setCropId(\"\")\n        }\n\n        const {handleChange,values,handleSubmit,getFormData,errors} = useForm(submitForm,validate,setTheSetSearch);\n\n        const getInputValue = (e) => {\n            //   console.log(\"e\",e.target.value)\n              setCropId(e.target.value)\n        }\n\n        const searchHandler = () => {\n            setSearch(true) \n            console.log(\"searchHolder\",cropId)\n            try{\n            fetch(`${process.env.REACT_APP_API_URL}/products/getCrop/id`,{\n                method: 'POST',\n                headers: {\n                    'content-type': 'application/json',\n                    'token': JSON.parse(Cookies.get('token')).token\n                },\n                body: JSON.stringify({\n                    id: cropId\n                })\n            }).then(res => {\n                console.log(\"res\",res)\n                return res.json()\n            })\n            .then(data => {\n                console.log(\"data\",data);\n                if(data.error){\n                    return swal(data.error)\n                }\n                getFormData(data,cropId)\n                setSearch(false)\n                // setCropId(\"\")\n            })\n\n            }catch(e){\n                if(!Cookies.get('token')){\n                    swal(\"Please Login\")\n                    localStorage.clear()\n                }\n            }\n            \n        }\n\n        return (\n            <div className={classes[\"container\"]}>\n                <div className={classes[\"search-container\"]} >\n                    <input className={classes[\"search-input\"]} onChange={getInputValue} value={cropId}/>\n                    <button className={classes[\"search-btn\"]} onClick={searchHandler}>Search</button>\n                </div>\n                {\n                    !search && <>\n                    <div className={`${classes[\"register-container\"]} ${classes.check}`} >\n                        <form onSubmit={handleSubmit} className={classes[\"form\"]}>\n                            <h1 style={{textAlign:\"center\"}}>Update Crop</h1>\n                            <hr className={classes[\"hr\"]}/>\n                            <div>\n                                <label htmlFor=\"cropName\"  > \n                                     <b style={{fontSize:'25px'}}>Crop Name</b>\n                                </label>\n                                <input\n                                    id=\"cropName\"\n                                    type=\"text\"\n                                    name=\"cropName\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter the Crop Name\"\n                                    value={values.cropName}\n                                    readOnly\n                                />\n                                {errors.cropName && <p className={classes[\"warning\"]}>{errors.cropName}</p>}\n                            </div>\n                            <div>\n                                <label htmlFor=\"weight\" >\n                                     <b style={{fontSize:'25px'}}>Crop Weight (Kgs)</b>\n                                </label>\n                                <input\n                                    id=\"weight\"\n                                    type=\"number\"\n                                    name=\"weight\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter the weight of the crop\"\n                                    value={values.weight}\n                                    onChange={handleChange}\n                                />\n                                {errors.weight && <p className={classes[\"warning\"]}>{errors.weight}</p>}\n                            </div>\n                            <div>\n                                <label htmlFor=\"price\" >\n                                     <b style={{fontSize:'25px'}}>Price</b>\n                                </label>\n                                <input\n                                    id=\"price\"\n                                    type=\"number\"\n                                    name=\"price\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter your price\"\n                                    value={values.price}\n                                    onChange={handleChange}\n                                />\n                                {errors.price && <p className={classes[\"warning\"]}>{errors.price}</p>}\n                            </div>\n                            <div >\n                                <label htmlFor=\"description\" >\n                                     <b style={{fontSize:'25px'}}>Product Description</b>\n                                </label>\n                                <input\n                                    id=\"description\"\n                                    type=\"text\"\n                                    name=\"description\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter the Product Description\"\n                                    value={values.description}\n                                    onChange={handleChange}\n                                />\n                                {errors.description && <p className={classes[\"warning\"]}>{errors.description}</p>}\n                            </div>\n                            <div >\n                                <label htmlFor=\"address\" >\n                                     <b style={{fontSize:'25px'}}>Address</b>\n                                </label>\n                                <input\n                                    id=\"address\"\n                                    type=\"text\"\n                                    name=\"address\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Address\"\n                                    value={values.address}\n                                    onChange={handleChange}\n                                />\n                                {errors.address && <p className={classes[\"warning\"]}>{errors.address}</p>}\n                            </div>\n                            <div >\n                                <label htmlFor=\"pincode\" >\n                                    <b style={{fontSize:'25px'}}>Pincode</b>\n                                </label>\n                                <input\n                                    id=\"pincode\"\n                                    type=\"number\"\n                                    name=\"pincode\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Pincode\"\n                                    value={values.pincode}\n                                    onChange={handleChange}\n                                />\n                                {errors.pincode && <p className={classes[\"warning\"]}>{errors.pincode}</p>}\n                            </div>\n\n                            <div >\n                                <label htmlFor=\"imageView\" >\n                                     <b style={{fontSize:'25px'}}>Images</b>\n                                </label>\n                                <div className={classes.imageContainer}>\n                                    {console.log(\"values\",values)}\n                                    {\n                                    values.images && values.images.map((image,index) => {\n                                        return <img className={classes.images} key={index} src={`${process.env.REACT_APP_API_URL}${image}`} />\n                                    })\n                                    }\n                                </div>  \n                            </div>\n        \n                            {/* <div >\n                                <label htmlFor=\"images\" >\n                                     <b style={{fontSize:'25px'}}>Images</b>\n                                </label>\n                                <input\n                                    id=\"images\"\n                                    type=\"file\"\n                                    name=\"images\"\n                                    accept=\".png, .jpg\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Images\"\n                                    onChange={handleChange}\n                                    multiple\n                                />\n                                {errors.images && <p className={classes[\"warning\"]}>{errors.images}</p>}\n                            </div> */}\n        \n                            <button type=\"submit\" className={classes[\"registerbtn\"]}>\n                                Update\n                            </button>\n        \n                        </form>\n                    </div></>\n                }\n            </div>\n        );\n}\n\nexport default UpdateCrop;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/showCrop/showCrop.js",["230"],"import React, {Component} from 'react';\nimport classes from './showCrop.module.css';\nimport CropContent from './cropContent/cropContent';\nimport swal from 'sweetalert';\nimport { withRouter } from 'react-router-dom'    \n\nclass ShowCrop extends Component{\n\n    state = {\n        x: 0,\n        crop: null,\n        farmer: null\n    }\n\n    goLeft = () => {\n       this.setState((preProps) => {\n        if(preProps.x === 0)\n        {\n            return {x:-100*(this.state.crop.images.length-1)}\n        }else{\n            return {x:preProps.x+100}\n        }\n       })\n    }\n\n    goRight = () => {\n        console.log(this.state.x);\n        this.setState((preProps) => {\n            if(preProps.x === -100*(this.state.crop.images.length-1))\n            {\n                return {x:0}\n            }else{\n                return {x:preProps.x-100}\n            }\n        })\n    }\n\n    openUpdatePage = () => {\n        this.props.history.push(`/farmer/updateCrop/${this.state.crop._id}`)\n    }\n\n    openDeletePage = () => {\n        this.props.history.push(`/farmer/deleteCrop/${this.state.crop._id}`)\n    }\n\n    componentDidMount(){\n        console.log(\"params id\",this.props.match.params.id)\n        fetch(`${process.env.REACT_APP_API_URL}/products/id`,{\n            method: 'POST',\n            headers : {\n                'Content-Type' : 'Application/json'\n            },\n            body:JSON.stringify({\n                id: this.props.match.params.id\n            })\n        }).then(res => res.json())      \n        .then(async (data) => {\n            console.log(\"data\",data)\n            this.setState({crop: data.crop,farmer: data.farmer})\n            }).catch(e => {\n            console.log(\"error\",e)\n            swal(e);\n        })\n    }\n\n   render() {\n       return (\n           <>\n                {this.state.crop !== null ? (<>\n                    <div className={classes.slider}>\n                    {\n                        this.state.crop.images.map((item,index) => {\n                            console.log(\"index\",index)\n                            return (\n                                <div key={index} className={classes.slide}\n                                     style={{transform:`translateX(${this.state.x}%)`}}>\n                                    <img src={`${process.env.REACT_APP_API_URL}${item}`} className={classes.imageStyles}/>\n                                </div>\n                            )\n                        })\n                    }\n\n                <button className={classes.goLeft} onClick={this.goLeft}>\n                    <i class=\"fas fa-chevron-left\" style={{fontSize:'2vw',fontWeight:'bold'}}></i>\n                </button>\n                <button className={classes.goRight} onClick={this.goRight}>\n                    <i class=\"fas fa-chevron-right\" style={{fontSize:'2vw',fontWeight:'bold'}}></i>\n                </button>\n                </div>\n                <CropContent crop={this.state.crop} farmer={this.state.farmer}/>\n                <div className={classes[\"btn-container\"]}>\n                    <div className={classes.btnDiv}>\n                       <button className={classes.btn} onClick={this.openUpdatePage}>Update</button>\n                    </div>\n                    <div className={classes.btnDiv}>\n                        <button className={classes.btn} onClick={this.openDeletePage}>Delete</button>    \n                    </div>\n                 </div>    \n            </>) : <p style={{textAlign:'center',marginTop:'200px'}}>Waiting...</p>}\n\n            </>\n       );\n   }\n}\n\nexport default withRouter(ShowCrop);","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/utilities/history/history.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/deleteCrop/deleteCrop.js",["231","232","233","234","235"],"import React, {useState,useEffect} from 'react';\nimport useForm from './useForm/useForm'\nimport validate from './useForm/validateInfo'\nimport {Link} from 'react-router-dom';\nimport classes from './deleteCrop.module.css';\nimport Cookies from 'js-cookie'\nimport swal from 'sweetalert'\n\nconst DeleteCrop = ({match:{params}}) => {\n    const [cropId,setCropId] = useState(\"\")\n    const [paramCropId,setParamCropId] = useState(\"\")\n\n    useEffect(async() => {\n        console.log(\"Effect using\",params)\n        if(params.id && !cropId){\n            console.log(\"cropId\")\n            setCropId(params.id)\n            setParamCropId(params.id)\n            console.log(\"cr\",cropId)\n        }\n    });\n\n    useEffect(() => {\n        if(cropId !== \"\"){\n            searchHandler()\n        }\n    },[paramCropId])\n\n    const submitForm = () => {\n        console.log(\"Submit Form\")\n    }\n    const [search,setSearch] = useState(true);\n\n    const setTheSetSearch = () => {\n        setSearch(true)\n    }\n\n    const {handleChange,values,handleSubmit,getFormData,errors} = useForm(submitForm,validate,setTheSetSearch);\n\n    const getInputValue = (e) => {\n        //   console.log(\"e\",e.target.value)\n          setCropId(e.target.value)\n    }\n\n    const searchHandler = () => {\n        setSearch(true) \n        console.log(\"searchHolder\",cropId)\n        fetch(`${process.env.REACT_APP_API_URL}/products/getCrop/id`,{\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                'token': JSON.parse(Cookies.get('token')).token\n            },\n            body: JSON.stringify({\n                id: cropId\n            })\n        }).then(res => {\n            console.log(\"res\",res)\n            return res.json()\n        })\n        .then(data => {\n            console.log(\"data\",data);\n            if(data.error){\n                return swal(data.error)\n            }\n            getFormData(data,cropId)\n            setSearch(false)\n            setCropId(\"\")\n        })\n        \n    }\n\n        return ( <div className={classes[\"container\"]}>\n                <div className={classes[\"search-container\"]} >\n                    <input className={classes[\"search-input\"]} onChange={getInputValue} value={cropId}/>\n                    <button className={classes[\"search-btn\"]} onClick={searchHandler}>Search</button>\n                </div>\n                {\n                    !search && <>\n                    <div className={`${classes[\"register-container\"]} ${classes.check}`} >\n                        <form onSubmit={handleSubmit} className={classes[\"form\"]}>\n                            <h1 style={{textAlign:\"center\"}}>Delete Crop</h1>\n                            <hr className={classes[\"hr\"]}/>\n                            <div>\n                                <label htmlFor=\"cropName\"  > \n                                     <b style={{fontSize:'25px'}}>Crop Name</b>\n                                </label>\n                                <input\n                                    id=\"cropName\"\n                                    type=\"text\"\n                                    name=\"cropName\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter the Crop Name\"\n                                    value={values.cropName}\n                                    onChange={handleChange}\n                                    readOnly\n                                />\n                                {errors.cropName && <p className={classes[\"warning\"]}>{errors.cropName}</p>}\n                            </div>\n                            <div>\n                                <label htmlFor=\"weight\" >\n                                     <b style={{fontSize:'25px'}}>Crop Weight (Kgs)</b>\n                                </label>\n                                <input\n                                    id=\"weight\"\n                                    type=\"number\"\n                                    name=\"weight\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter the weight of the crop\"\n                                    value={values.weight}\n                                    onChange={handleChange}\n                                    readOnly\n                                />\n                                {errors.weight && <p className={classes[\"warning\"]}>{errors.weight}</p>}\n                            </div>\n                            <div>\n                                <label htmlFor=\"price\" >\n                                     <b style={{fontSize:'25px'}}>Price</b>\n                                </label>\n                                <input\n                                    id=\"price\"\n                                    type=\"number\"\n                                    name=\"price\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter your price\"\n                                    value={values.price}\n                                    onChange={handleChange}\n                                    readOnly\n                                />\n                                {errors.price && <p className={classes[\"warning\"]}>{errors.price}</p>}\n                            </div>\n                            <div >\n                                <label htmlFor=\"description\" >\n                                     <b style={{fontSize:'25px'}}>Product Description</b>\n                                </label>\n                                <input\n                                    id=\"description\"\n                                    type=\"text\"\n                                    name=\"description\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Enter the Product Description\"\n                                    value={values.description}\n                                    onChange={handleChange}\n                                    readOnly\n                                />\n                                {errors.description && <p className={classes[\"warning\"]}>{errors.description}</p>}\n                            </div>\n                            <div >\n                                <label htmlFor=\"address\" >\n                                     <b style={{fontSize:'25px'}}>Address</b>\n                                </label>\n                                <input\n                                    id=\"address\"\n                                    type=\"text\"\n                                    name=\"address\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Address\"\n                                    value={values.address}\n                                    onChange={handleChange}\n                                    readOnly\n                                />\n                                {errors.address && <p className={classes[\"warning\"]}>{errors.address}</p>}\n                            </div>\n                            <div >\n                                <label htmlFor=\"pincode\" >\n                                    <b style={{fontSize:'25px'}}>Pincode</b>\n                                </label>\n                                <input\n                                    id=\"pincode\"\n                                    type=\"number\"\n                                    name=\"pincode\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Pincode\"\n                                    value={values.pincode}\n                                    onChange={handleChange}\n                                    readOnly\n                                />\n                                {errors.pincode && <p className={classes[\"warning\"]}>{errors.pincode}</p>}\n                            </div>\n\n                            <div >\n                                <label htmlFor=\"imageView\" >\n                                     <b style={{fontSize:'25px'}}>Images</b>\n                                </label>\n                                <div className={classes.imageContainer}>\n                                    {console.log(\"values\",values)}\n                                    {\n                                    values.images && values.images.map((image,index) => {\n                                        return <img className={classes.images} key={index} src={`${process.env.REACT_APP_API_URL}${image}`} />\n                                    })\n                                    }\n                                </div>  \n                            </div>\n        \n                            {/* <div >\n                                <label htmlFor=\"images\" >\n                                     <b style={{fontSize:'25px'}}>Images</b>\n                                </label>\n                                <input\n                                    id=\"images\"\n                                    type=\"file\"\n                                    name=\"images\"\n                                    accept=\".png, .jpg\"\n                                    className={classes[\"formInput\"]}\n                                    placeholder=\"Images\"\n                                    onChange={handleChange}\n                                    multiple\n                                />\n                                {errors.images && <p className={classes[\"warning\"]}>{errors.images}</p>}\n                            </div> */}\n        \n                            <button type=\"submit\" className={classes[\"registerbtn\"]}>\n                                Delete\n                            </button>\n        \n                        </form>\n                    </div></>\n                }\n            </div>\n        );\n}\n\nexport default DeleteCrop;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/News/news.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/Login.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/products.js",["236","237"],"import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport swal from 'sweetalert';\nimport classes from './product.module.css';\nimport ProductFilter from './ProductFilter/ProductFilter'\nimport ReactPaginate from 'react-paginate';\n\nclass CardLayout extends Component{\n\n   state = {\n     crops: [],\n     pageCount: 0,\n     pageSize: 10\n   }\n\n   componentDidMount(){\n    this.getProducts()\n   }\n\n    getProducts(){\n      fetch(`${process.env.REACT_APP_API_URL}/products/crops?pageNumber=1&pageSize=${this.state.pageSize}`,{\n        method: 'GET',\n        headers : {\n          'Content-Type' : 'Application/json'\n        }\n      }).then(res => {\n        return res.json()\n      })\n      .then(data => {\n         console.log(\"product data\",data);\n         this.setState({\n           crops: data.products,\n           pageCount: data.totalPages\n          })\n      })  \n      .catch(e => {\n        alert(e);\n      })\n    } \n\n   filterProducts = (filter) => {\n    this.setState({pageSize: filter.pageSize},() => {\n      this.getProducts()\n    })\n    console.log(\"call\")\n    // filter.crop = filter.crop.trim()\n    // filter.pincode = filter.pincode.trim()\n    //  fetch(`${process.env.REACT_APP_API_URL}/products/filter`,{\n    //    method: 'POST',\n    //    headers: {\n    //      'content-type' : 'application/json'\n    //    },\n    //    body: JSON.stringify({\n    //      filter\n    //    })\n    //  }).then(res => res.json())\n    //  .then(data => {\n    //    console.log(\"data\",data)\n    //    if(data.length)\n    //    this.setState({crops:data})\n    //    else\n    //    swal(\"No data found\")\n    //  })\n\n   }\n\n   handlePageClick = (pageInfo) => {\n     console.log(\"ok\",pageInfo)\n     this.setState({crops: []})\n     fetch(`${process.env.REACT_APP_API_URL}/products/crops?pageNumber=${pageInfo.selected+1}&pageSize=${this.state.pageSize}`,{\n      method: 'GET',\n      headers : {\n        'Content-Type' : 'Application/json'\n      }\n    }).then(res => {\n      return res.json()\n    })\n    .then(data => {\n       console.log(\"product data\",data);\n       this.setState({\n         crops: data.products,\n         pageCount: data.totalPages\n        })\n    })  \n    .catch(e => {\n      alert(e);\n    })\n   }\n\n    render() {\n        return (\n          <div className={classes[\"container\"]}>\n            <ProductFilter filterProducts={this.filterProducts}/>\n            <main className={classes.CardLayout}>\n              {\n                 this.state.crops.map((crop,index) => {\n                   console.log(crop);\n                  //  console.log(crop.images[0].buffer)\n                   return (<article key={index}>\n                    <Link to={`/crop/${crop._id}`}>\n                        <div className={classes.ImageContainer}>\n                            <img src={`${process.env.REACT_APP_API_URL}${crop.images[0]}`} alt=\"tshirt photo\" />\n                        </div>\n                    </Link>\n                    <div className={classes.content}>\n                        <h3>{crop.crop}</h3>\n                        <h4>{crop.amount}<span>KG</span></h4>\n                        <h4>MRP: Rs {crop.price}.00/-</h4>\n                    </div>\n                  </article>);\n                 })\n              }\n            </main>\n            { \n              this.state.crops.length === 0 ? \n                <div class=\"fa-5x\" style={{textAlign:\"center\",minHeight:'70vh'}}>  \n                  <i class=\"fas fa-spinner fa-spin\"></i>\n                </div> \n                : null\n            }\n            <ReactPaginate\n              previousLabel={'<<'}\n              nextLabel={'>>'}\n              breakLabel={'...'}\n              pageCount={this.state.pageCount}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={1}\n              onPageChange={this.handlePageClick}\n              containerClassName={classes['pagination']}\n              pageClassName={classes['page-item']}\n              pageLinkClassName={classes['page-link']}\n              previousClassName={classes['page-item']}\n              previousLinkClassName={classes['page-link']}\n              nextClassName={classes['page-item']}\n              nextLinkClassName={classes['page-link']}\n              breakClassName={classes['page-item']}\n              breakLinkClassName={classes['page-link']}\n              activeClassName={classes['active']}\n            />  \n          </div>\n        );\n    }\n}\n\nexport default CardLayout;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/FormSignUp.js",["238"],"import React, {useState} from 'react';\nimport useForm from './useForm/useForm'\nimport validate from './useForm/validateInfo'\nimport {Link} from 'react-router-dom';\nimport classes from './register.module.css';\n\nconst SignUp = ({submitForm,userType}) => {\n       console.log(\"form\",userType)\n        const {handleChange,values,handleSubmit,errors,disabled} = useForm(submitForm,userType,validate);\n        return (\n            <div className={`${classes[\"register-container\"]} ${classes.check}`} >\n                <form onSubmit={handleSubmit} className={classes[\"form\"]}>\n                    <h1 style={{textAlign:\"center\"}}>REGISTER</h1>\n                    <hr className={classes[\"hr\"]}/>\n                    <div>\n                        <label htmlFor=\"username\"  >\n                             <b style={{fontSize:'25px'}}>Username</b>\n                        </label>\n                        <input\n                            id=\"username\"\n                            type=\"text\"\n                            name=\"username\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter your username\"\n                            value={values.username}\n                            onChange={handleChange}\n                        />\n                        {errors.username && <p className={classes[\"warning\"]}>{errors.username}</p>}\n                    </div>\n                    <div>\n                        <label htmlFor=\"email\" >\n                             <b style={{fontSize:'25px'}}>Email</b>\n                        </label>\n                        <input\n                            id=\"email\"\n                            type=\"email\"\n                            name=\"email\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter your email\"\n                            value={values.email}\n                            onChange={handleChange}\n                        />\n                        {errors.email && <p className={classes[\"warning\"]}>{errors.email}</p>}\n                    </div>\n                    <div>\n                        <label htmlFor=\"phoneNo\" >\n                             <b style={{fontSize:'25px'}}>Phone No</b>\n                        </label>\n                        <input\n                            id=\"phoneNo\"\n                            type=\"number\"\n                            name=\"phoneNo\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter your Phone Number\"\n                            value={values.phoneNo}\n                            onChange={handleChange}\n                        />\n                        {errors.phoneNo && <p className={classes[\"warning\"]}>{errors.phoneNo}</p>}\n                    </div>\n                    <div>\n                        <label htmlFor=\"password\" >\n                             <b style={{fontSize:'25px'}}>Password</b>\n                        </label>\n                        <input\n                            id=\"password\"\n                            type=\"password\"\n                            name=\"password\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Enter your password\"\n                            value={values.password}\n                            onChange={handleChange}\n                        />\n                        {errors.password && <p className={classes[\"warning\"]}>{errors.password}</p>}\n                    </div>\n                    <div >\n                        <label htmlFor=\"password2\" >\n                             <b style={{fontSize:'25px'}}>Confirm Password</b>\n                        </label>\n                        <input\n                            id=\"password2\"\n                            type=\"password\"\n                            name=\"password2\"\n                            className={classes[\"formInput\"]}\n                            placeholder=\"Confirm your password\"\n                            value={values.password2}\n                            onChange={handleChange}\n                        />\n                        {errors.password2 && <p className={classes[\"warning\"]}>{errors.password2}</p>}\n                    </div>\n                    {disabled ? <div class=\"fa-3x\" style={{textAlign:\"center\"}}>  <i class=\"fas fa-spinner fa-spin\"></i></div> : <><button type=\"submit\" className={classes[\"registerbtn\"]}>\n                        Sign Up\n                    </button>\n                    <span type=\"submit\" >\n                        <p style={{textAlign:\"center\"}}>Already have an account? <Link to=\"/login\">LOGIN</Link></p> \n                    </span></>}\n                </form>\n            </div>\n        );\n}\n\nexport default SignUp;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/FormSignIn.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Home/corousal/corousal.js",["239","240"],"import React, { Component } from 'react';\nimport classes from './corousal.module.css';\nimport swal from 'sweetalert';\nimport land1 from './../../../assets/images/land7.jpg'\nimport land2 from './../../../assets/images/land8.jpg'\nimport land3 from './../../../assets/images/car3.jpeg'\n\nclass Corousal extends Component{\n\n    state = {\n        x: 0,\n        crop: [land1,land2,land3],\n        farmer: null\n    }\n\n    componentDidMount(){\n        setInterval(() => {\n            this.goLeft()\n        }, 4000);\n    }\n\n    goLeft = () => {\n       this.setState((preProps) => {\n        if(preProps.x === 0)\n        {\n            return {x:-100*(this.state.crop.length-1)}\n        }else{\n            return {x:preProps.x+100}\n        }\n       })\n    }\n\n    goRight = () => {\n        // console.log(this.state.x);\n        this.setState((preProps) => {\n            if(preProps.x === -100*(this.state.crop.length-1))\n            {\n                return {x:0}\n            }else{\n                return {x:preProps.x-100}\n            }\n        })\n    }\n\n   render() {\n       return (\n           <>\n                <div className={classes.slider}>\n                    {\n                        this.state.crop.map((item,index) => {\n                            // console.log(\"index\",index)\n                            return (\n                                <div key={index} className={classes.slide}\n                                     style={{transform:`translateX(${this.state.x}%)`}}>\n                                    <img src={item} className={classes.imageStyles}/>\n                                </div>\n                            )\n                        })\n                    }\n\n                    <button className={classes.goLeft} onClick={this.goLeft}>\n                        <i class=\"fas fa-chevron-left\" style={{fontSize:'2vw',fontWeight:'bold'}}></i>\n                    </button>\n                    <button className={classes.goRight} onClick={this.goRight}>\n                        <i class=\"fas fa-chevron-right\" style={{fontSize:'2vw',fontWeight:'bold'}}></i>\n                    </button>\n                </div>\n            </>\n       );\n   }\n}\n\nexport default Corousal;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/farmerProducts/farmerProducts.js",["241"],"import React, { Component } from 'react';\nimport classes from './farmerProducts.module.css'\nimport {Link} from 'react-router-dom'\n\nclass FarmerProducts extends Component \n{\n\n    render() {\n        return (\n             <>\n            <div className={classes[\"container\"]}>\n                <main className={classes.CardLayout}>\n                {this.props.product && this.props.product.map((crop,index) => {\n                    console.log(\"map\")\n                    return (<article key={index}>\n                        <Link to={`/farmer/crop/${crop._id}`}>\n                            <div className={classes.ImageContainer}>\n                                <img src={`${process.env.REACT_APP_API_URL}${crop.images[0]}`} alt=\"tshirt photo\" />\n                            </div>\n                        </Link>\n                        <div className={classes.content}>\n                            <h3>{crop.crop}</h3>\n                            <h4>{crop.amount}<span>KG</span></h4>\n                            <h4>MRP: Rs {crop.price}.00/-</h4>\n                        </div>\n                    </article>)\n                })\n                    \n                }\n                {/* {this.state.crops.length === 0 ? <p style={{marginTop:'100px'}}>Waiting ...</p> : null}   */}\n                </main>\n            </div>\n             </>\n        );\n    }\n}\n\nexport default FarmerProducts;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Home/userCounter/userCounter.js",["242","243","244"],"import { set } from 'js-cookie';\nimport React, {useState,useEffect} from 'react';\nimport classes from './userCounter.module.css'\n\nconst UserCounter = () => {\n\n   const [counter,setCounter] = useState({Farmers: 0,Buyers: 0})\n   const [count,setCount] = useState(false)\n\n   useEffect(() => {\n\n    if(counter.Farmers === 0)\n    {\n\n        fetch(`${process.env.REACT_APP_API_URL}/users/count`,{\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(data => {\n            console.log(\"data\",data)\n            setCounter({Farmers:data.Farmers,Buyers:data.Buyers})\n        })\n    }       \n   })\n\n   useEffect(() => {\n       console.log(\"counter in useEffect\",counter)\n    if(counter.Farmers !== 0 && count)\n    {\n        setCount(true)\n        counterFunction(\"Farmers\", 0, counter.Farmers, 3000); \n    }   \n    if(counter.Buyers !== 0 && count)\n    counterFunction(\"Buyers\", 0, counter.Buyers, 3000); \n\n   },[counter])\n\n   const counterFunction = (userType, start, end, duration) => {\n    let current = start,\n     range = end - start,\n     increment = end > start ? 1 : -1,\n     step = Math.abs(Math.floor(duration / range)),\n     timer = setInterval(() => {\n      current += increment;\n      setCounter({[userType]:current})\n      if (current == end) {\n       clearInterval(timer);\n      }\n     }, step);\n   }\n\n   return(\n       <>\n            <section>\n                <div className={classes[\"container\"]}>\n                    <div className={classes[\"user-container\"]}>\n                        <div className={classes[\"buyers\"]}>\n                            <p style={{textAlign:'center',fontSize:'30px'}}>Number of Buyers registered</p>\n                            <div className={classes[\"counter-container\"]}>\n                                <p className={classes[\"counter\"]} style={{textAlign:'center'}}>{counter.Buyers}</p>\n                            </div>\n                        </div>\n                        <div className={classes[\"farmer\"]}>\n                            <p style={{textAlign:'center',fontSize:'30px'}}>Number of Farmers registered</p>\n                            <div className={classes[\"counter-container\"]}>\n                                <p className={classes[\"counter\"]} style={{textAlign:'center'}}>{counter.Farmers}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n       </>\n   )\n}\n\nexport default UserCounter","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/utilities/enums/userTypes.js",["245"],"export default {\n    SELECT: \"SELECT\",\n    BUYER: 'BUYER',\n    FARMER: 'FARMER'\n}","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/useForm/useForm.js",["246","247","248","249","250"],"import React,{useState,useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport {AuthContext} from './../../../App'\nimport getUserData from './../../../utilities/userData/userData'\nimport swal from 'sweetalert'\n\nconst useForm = (callback,validate) => {\n    const [values,setValues] = useState({\n        username: '',\n        email: '',\n        phoneNo: '',\n        address: '',\n        pincode: ''\n    })\n    const [product,setProduct] = useState(null)\n    // const {state,dispatch} = React.useContext(AuthContext)\n    const [errors,setError] = useState({});\n    const [isSubmitting,setIsSubmitting] = useState(false);\n\n    const handleChange = e => {\n        const {name,value} = e.target;\n        setValues({\n            ...values,\n            [name] : value\n        })\n    }\n\n    useEffect(() => {\n      if(values.email === ''){\n\n        fetch(`${process.env.REACT_APP_API_URL}/profile`,{\n          method: 'GET',\n          headers:{\n            'content-type' : 'application/json',\n            token: JSON.parse(Cookies.get('token')).token\n          }\n        }).then(res => res.json())\n        .then(data => {\n\n          if(data.error){\n            swal(data.error)\n          }\n\n          console.log(\"profile Data\",data)\n\n          const {user} = data\n          const {products} = data\n          setProduct(products)\n          console.log(\"user\",user)\n          \n          setValues({\n            username: user.name,\n            email: user.email,\n            phoneNo: user.phoneNo,\n            address: user.address,\n            pincode: user.pincode\n          })\n\n        })\n      }\n    },[])\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        console.log(\"err\")\n        setError(validate(values))\n        setIsSubmitting(true);\n    }\n\n    useEffect(() => {\n      console.log(\"length\",Object.keys(errors).length)\n        if(Object.keys(errors).length === 0 && isSubmitting){\n          const token = JSON.parse(Cookies.get('token')).token\n          fetch(`${process.env.REACT_APP_API_URL}/profile/update`,{\n            method: 'POST',\n            headers:{\n              'content-type':'application/json',\n              token\n            },\n            body:JSON.stringify({\n              name: values.username,\n              phoneNo: values.phoneNo,\n              address: values.address,\n              pincode: values.pincode\n            })\n          }).then(res => res.json())\n          .then(data => {\n            if(data.error){\n              swal(data.error)\n            }else{\n              swal(\"Profile was uploaded successfully\")\n            }\n          })\n        }\n    },[errors])\n\n    return {handleChange,values,handleSubmit,errors,product};\n}\n\nexport default useForm;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Profile/useForm/validateInfo.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/productsDetails/ProductContent/ProductContent.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/addCrop/useForm/validateInfo.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/addCrop/useForm/useForm.js",["251","252","253"],"import React,{useState,useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport {AuthContext} from './../../../../App';\nimport swal from 'sweetalert'\nimport axios from 'axios'\n\nconst useForm = (callback,validate,EnableButton,DisableButton) => {\n    const [values,setValues] = useState({\n        cropName: '',\n        weight: '',\n        price: '',\n        description: '',\n        address: '',\n        pincode: ''\n    })\n\n    const [disabled,setDisabled] = useState(false)\n\n    const {dispatch} = React.useContext(AuthContext)\n    \n    const [errors,setError] = useState({});\n    const [isSubmitting,setIsSubmitting] = useState(false);\n\n    const handleChange = (e,data,propertyName) => {\n      const {name} = e.target\n        if(data || propertyName){\n          setValues({\n            ...values,\n            [propertyName] : data ? data : \"\"\n          })\n        }else{\n          const {value} = e.target;\n          setValues({\n            ...values,\n            [name] : value\n          })\n        }\n        // console.log(value)\n    }\n\n    const handleSubmit = e => {\n\n        console.log(values);\n\n        e.preventDefault();\n\n        setError(validate(values))\n        setIsSubmitting(true);\n\n    }\n\n    useEffect(() => {\n\n      fetch(`${process.env.REACT_APP_API_URL}/profile`,{\n        method: 'GET',\n        headers:{\n          'content-type' : 'application/json',\n          token: JSON.parse(Cookies.get('token')).token\n        }\n      }).then(res => res.json())\n      .then(data => {\n\n        if(data.error){\n          swal(data.error)\n        }\n\n        console.log(\"profile Data\",data)\n\n        const {user} = data\n        console.log(\"user\",user)\n        \n        setValues({\n          address: user.address,\n          pincode: user.pincode\n        })\n\n      })\n    },[])\n\n    useEffect(() => {\n        if(Object.keys(errors).length === 0 && isSubmitting){\n\n          setDisabled(true)     \n\n          console.log('env',process.env)\n\n          let formData = new FormData();\n\n          for(let prop in values){\n              console.log(\"prop\",prop)\n              // if(prop === \"images\"){\n              //   for(let imageProp in values[prop])\n              //   {\n              //     if(imageProp !== \"length\")\n              //     formData.append(prop,values[prop][imageProp])\n              //   }\n              // }else{\n                formData.append(prop,values[prop])\n              // }\n          }\n\n          for (var pair of formData.entries()) {\n            console.log(pair[0]+ ', ' + pair[1]); \n          }\n          console.log(\"Cookies\",Cookies.get('token'))\n          const token = JSON.parse(Cookies.get('token'))\n          fetch(`${process.env.REACT_APP_API_URL}/products/farmer/addCrop`,{\n            method: 'post',\n            body: formData,\n            headers:{\n              \"token\":token.token\n            }\n          }).then(ress => {\n            console.log(\"ress\",ress)\n            if(ress.status === 401)\n            {\n              swal(\"Please Login\")\n            }\n            return ress.json()\n          })\n          .then((response) => {\n                if(response.error){\n                  return swal(response.error)\n                }\n                swal(`Your product id is ${response.id}`)\n                setValues({\n                  ...values,\n                  cropName: '',\n                  weight: '',\n                  price: '',\n                  description: ''\n                })\n                setIsSubmitting(false)\n                console.log(response)\n          }).catch((error) => {\n            console.log(\"error\",error)\n          }).finally(() => {\n            setDisabled(false)\n          });\n\n        }\n    },[errors])\n\n    return {handleChange,values,handleSubmit,errors,disabled};\n}\n\nexport default useForm;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/updateCrop/useForm/validateInfo.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/showCrop/cropContent/cropContent.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/updateCrop/useForm/useForm.js",["254","255","256"],"import React,{useState,useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport {AuthContext} from './../../../../App';\nimport swal from 'sweetalert'\nimport axios from 'axios'\n\nconst useForm = (callback,validate,setSearch) => {\n    const [values,setValues] = useState({\n        cropName: '',\n        weight: '',\n        price: '',\n        description: '',\n        address: '',\n        pincode: '',\n        images: null\n    })\n\n    let [cropId,setCropId] = useState(\"\")\n\n    const {dispatch} = React.useContext(AuthContext)\n    \n    const [errors,setError] = useState({});\n    const [isSubmitting,setIsSubmitting] = useState(false);\n\n    const handleChange = e => {\n      const {name} = e.target\n        if(name === \"images\")\n        {\n            console.log(e);\n            console.log(e.target.files)\n            console.log(e.target)\n            const value = e.target.files\n            setValues({\n              ...values,\n              [name] : value\n            })\n        }else{\n          const {value} = e.target;\n          setValues({\n            ...values,\n            [name] : value\n          })\n        }\n        // console.log(value)\n    }\n\n    const handleSubmit = e => {\n\n        console.log(values);\n\n        e.preventDefault();\n\n        setError(validate(values))\n        setIsSubmitting(true);\n    }\n\n    const getFormData = (data,id,search) => {\n      setValues({\n        images: data.images,\n        cropName: data.crop,\n        weight: data.amount,\n        price: data.price,\n        description: data.description,\n        address: data.address,\n        pincode: data.pincode\n      })\n      setCropId(id)\n      console.log(\"getFormId\",cropId)   \n      setSearch = search\n    }\n\n    useEffect(() => {\n        if(Object.keys(errors).length === 0 && isSubmitting){\n          console.log('env',cropId)\n\n          fetch(`${process.env.REACT_APP_API_URL}/products/farmer/updateCrop`,{\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n                'token': JSON.parse(Cookies.get('token')).token\n            },\n            body:JSON.stringify({\n                id: cropId,\n                crop: values.cropName,\n                address: values.address,\n                price: values.price,\n                amount: values.weight,\n                description: values.description,\n                pincode: values.pincode\n            })\n          }).then(res => {\n                console.log(\"response\",res)\n                return res.json()\n          })\n          .then(data => {\n              console.log(\"data\",data);\n              if(data.error){\n                return swal(data.error)\n              }\n              swal(\"Data was uploaded successfully\")\n\n              setValues({\n                  cropName: '',\n                  weight: '',\n                  price: '',\n                  description: '',\n                  address: '',\n                  images: null\n              })\n              setSearch()\n\n          })\n\n        }\n    },[errors])\n\n    return {handleChange,values,handleSubmit,getFormData,errors};\n}\n\nexport default useForm;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/deleteCrop/useForm/useForm.js",["257","258","259"],"import React,{useState,useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport {AuthContext} from './../../../../App';\nimport swal from 'sweetalert'\nimport axios from 'axios'\n\nconst useForm = (callback,validate,setSearch) => {\n  const [values,setValues] = useState({\n      cropName: '',\n      weight: '',\n      price: '',\n      description: '',\n      address: '',\n      pincode: '',\n      images: null\n  })\n\n  let [cropId,setCropId] = useState(\"\")\n\n  const {dispatch} = React.useContext(AuthContext)\n  \n  const [errors,setError] = useState({});\n  const [isSubmitting,setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {name} = e.target\n      if(name === \"images\")\n      {\n          console.log(e);\n          console.log(e.target.files)\n          console.log(e.target)\n          const value = e.target.files\n          setValues({\n            ...values,\n            [name] : value\n          })\n      }else{\n        const {value} = e.target;\n        setValues({\n          ...values,\n          [name] : value\n        })\n      }\n      // console.log(value)\n  }\n\n  const handleSubmit = e => {\n\n      console.log(values);\n\n      e.preventDefault();\n\n      setError(validate(values))\n      setIsSubmitting(true);\n  }\n\n  const getFormData = (data,id,search) => {\n    setValues({\n      images: data.images,\n      cropName: data.crop,\n      weight: data.amount,\n      price: data.price,\n      description: data.description,\n      address: data.address,\n      pincode: data.pincode\n    })\n    setCropId(id)\n    console.log(\"getFormId\",cropId)   \n  }\n\n  useEffect(() => {\n      if(Object.keys(errors).length === 0 && isSubmitting){\n        console.log('env',cropId)\n\n        fetch(`${process.env.REACT_APP_API_URL}/products/farmer/deleteCrop`,{\n          method: 'POST',\n          headers: {\n              'content-type': 'application/json',\n              'token': JSON.parse(Cookies.get('token')).token\n          },\n          body:JSON.stringify({\n              id: cropId\n          })\n        }).then(res => {\n              console.log(\"response\",res)\n              return res.json()\n        })\n        .then(data => {\n            console.log(\"data\",data);\n            if(data.error){\n              return swal(data.error)\n            }\n            swal(\"Data was Deleted successfully\")\n\n            setValues({\n                cropName: '',\n                weight: '',\n                price: '',\n                description: '',\n                address: '',\n                images: null\n            })\n            setSearch()\n\n        })\n\n      }\n  },[errors])\n\n  return {handleChange,values,handleSubmit,getFormData,errors};\n}\n\nexport default useForm;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/farmers/deleteCrop/useForm/validateInfo.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/News/NewsFilter/NewsFilter.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/products/ProductFilter/ProductFilter.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/containers/hoc/Auxiliary/Auxiliary.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/useForm/useForm.js",["260"],"import React,{useState,useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport {AuthContext} from './../../../App';\nimport swal from 'sweetalert'\n\nconst useForm = (callback,userType,validate) => {\n  console.log(\"useForm\",userType)\n    const [values,setValues] = useState({\n        username: '',\n        email: '',\n        phoneNo: '',\n        password: '',\n        password2: ''\n    })\n\n    const {dispatch} = React.useContext(AuthContext)\n    \n    const [disabled,setDisabled] = useState(false)\n    const [errors,setError] = useState({});\n    const [isSubmitting,setIsSubmitting] = useState(false);\n\n    const handleChange = e => {\n        const {name,value} = e.target;\n        setValues({\n            ...values,\n            [name] : value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        setError(validate(values))\n        setIsSubmitting(true);\n    }\n\n    useEffect(() => {\n      console.log(\"userType\",userType)\n        if(Object.keys(errors).length === 0 && isSubmitting){\n          setDisabled(true)\n          console.log('env',process.env)\n            fetch(`${process.env.REACT_APP_API_URL}/auth/register`,{\n                method: 'POST',\n                headers : {\n                  'Content-Type' : 'Application/json'\n                },\n                body : JSON.stringify({\n                  name : values.username,\n                  email : values.email,\n                  phoneNo : values.phoneNo,\n                  password : values.password,\n                  type: userType\n                })\n              }).then(async (res) => {\n                  return res.json();\n              })\n              .then(data => {\n                  console.log(\"data\",data);\n                  if(data.error){\n                    return swal(data.error)\n                  }\n                  Cookies.set('token', data, { expires: 1 })\n                  dispatch({\n                    type: \"LOGIN\",\n                    payload: {\n                      isAuthenticated: true,\n                      user: {\n                        name: values.username,\n                        email: values.email,\n                        phoneNo: values.phoneNo,\n                        type: userType\n                      }\n                    }\n                  })\n                  callback();\n              }).catch(e => {\n                swal(e)\n              }).finally(() => {\n                setDisabled(false)\n              })\n        }\n    },[errors])\n\n    return {handleChange,values,handleSubmit,errors,disabled};\n}\n\nexport default useForm;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Register/useForm/validateInfo.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/useForm/useForm.js",["261","262","263"],"import React,{useState,useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport {AuthContext} from './../../../App'\nimport swal from 'sweetalert';\n\nconst useForm = (callback,userType,validate) => {\n    const [values,setValues] = useState({\n        username: '',\n        email: '',\n        password: '',\n        password2: ''\n    })\n    const {dispatch} = React.useContext(AuthContext);\n\n    const [disabled,setDisabled] = useState(false)\n    const [errors,setError] = useState({});\n    const [isSubmitting,setIsSubmitting] = useState(false);\n\n    const handleChange = e => {\n        const {name,value} = e.target;\n        setValues({\n            ...values,\n            [name] : value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        setError(validate(values))\n        setIsSubmitting(true);\n    }\n\n    useEffect(() => {\n        if(Object.keys(errors).length === 0 && isSubmitting){\n          setDisabled(true)\n            fetch(`${process.env.REACT_APP_API_URL}/auth/login`,{\n                method: 'POST',\n                headers : {\n                  'Content-Type' : 'Application/json'\n                },\n                body : JSON.stringify({\n                  email : values.email,\n                  password : values.password,\n                  type: userType\n                })\n              }).then(res => {\n                console.log(\"res\",res);\n                if(res.ok){\n                  return res.json();\n                }else if(res.status === 400){\n                  throw  {error:{\n                        password: 'Invalid credentials'\n                  }}\n                }else{\n                  throw \"\";\n                }\n                \n              })\n              .then(data => {\n                console.log(\"data entry\",data);\n                    Cookies.set('token', data, { expires: 1 })\n                    dispatch({\n                        type: \"LOGIN\",\n                        payload: {\n                          isAuthenticated: true,\n                          user: {\n                            email: values.email,\n                            type: userType\n                          }\n                        }\n                      })\n                    callback();\n              }).catch(e => {\n                if(e.error){\n                  setError({password: e.error.password})\n                }else{\n                  swal(\"Unexpected Error\");\n                }\n                console.log(\"login error\",e);\n              }).finally(() => {\n                setDisabled(false)\n              })\n        }\n    },[errors])\n\n    return {handleChange,values,handleSubmit,errors,disabled};\n}\n\nexport default useForm;","/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/components/Login/useForm/validateInfo.js",[],"/Users/tnluser/Documents/reactProjects/farmerSupport/major-project-frontend/src/utilities/userData/userData.js",[],{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","severity":1,"message":"269","line":64,"column":41,"nodeType":"270","endLine":64,"endColumn":125},{"ruleId":"271","severity":1,"message":"272","line":81,"column":25,"nodeType":"270","endLine":81,"endColumn":203},{"ruleId":"273","severity":1,"message":"274","line":85,"column":41,"nodeType":"270","endLine":85,"endColumn":127},{"ruleId":"273","severity":1,"message":"274","line":92,"column":41,"nodeType":"270","endLine":92,"endColumn":121},{"ruleId":"273","severity":1,"message":"274","line":99,"column":41,"nodeType":"270","endLine":99,"endColumn":199},{"ruleId":"273","severity":1,"message":"274","line":106,"column":41,"nodeType":"270","endLine":106,"endColumn":244},{"ruleId":"273","severity":1,"message":"274","line":113,"column":41,"nodeType":"270","endLine":113,"endColumn":243},{"ruleId":"275","severity":1,"message":"276","line":120,"column":41,"nodeType":"270","endLine":120,"endColumn":90},{"ruleId":"273","severity":1,"message":"274","line":127,"column":41,"nodeType":"270","endLine":127,"endColumn":245},{"ruleId":"273","severity":1,"message":"274","line":134,"column":41,"nodeType":"270","endLine":134,"endColumn":100},{"ruleId":"275","severity":1,"message":"277","line":134,"column":41,"nodeType":"270","endLine":134,"endColumn":100},{"ruleId":"273","severity":1,"message":"274","line":141,"column":41,"nodeType":"270","endLine":141,"endColumn":130},{"ruleId":"273","severity":1,"message":"274","line":148,"column":41,"nodeType":"270","endLine":148,"endColumn":121},{"ruleId":"278","severity":1,"message":"279","line":1,"column":16,"nodeType":"280","messageId":"281","endLine":1,"endColumn":24},{"ruleId":"278","severity":1,"message":"282","line":4,"column":9,"nodeType":"280","messageId":"281","endLine":4,"endColumn":13},{"ruleId":"283","severity":1,"message":"284","line":68,"column":37,"nodeType":"270","endLine":68,"endColumn":123},{"ruleId":"285","severity":1,"message":"286","line":22,"column":7,"nodeType":"287","endLine":22,"endColumn":18,"suggestions":"288"},{"ruleId":"285","severity":1,"message":"289","line":24,"column":4,"nodeType":"280","endLine":24,"endColumn":13,"suggestions":"290"},{"ruleId":"285","severity":1,"message":"291","line":24,"column":14,"nodeType":"292","endLine":31,"endColumn":5},{"ruleId":"275","severity":1,"message":"277","line":56,"column":41,"nodeType":"270","endLine":56,"endColumn":78},{"ruleId":"278","severity":1,"message":"282","line":4,"column":9,"nodeType":"280","messageId":"281","endLine":4,"endColumn":13},{"ruleId":"278","severity":1,"message":"293","line":7,"column":24,"nodeType":"280","messageId":"281","endLine":7,"endColumn":43},{"ruleId":"283","severity":1,"message":"284","line":46,"column":29,"nodeType":"270","endLine":46,"endColumn":52},{"ruleId":"275","severity":1,"message":"277","line":38,"column":6,"nodeType":"270","endLine":38,"endColumn":18},{"ruleId":"275","severity":1,"message":"277","line":39,"column":6,"nodeType":"270","endLine":39,"endColumn":18},{"ruleId":"275","severity":1,"message":"277","line":40,"column":6,"nodeType":"270","endLine":40,"endColumn":18},{"ruleId":"275","severity":1,"message":"277","line":41,"column":6,"nodeType":"270","endLine":41,"endColumn":18},{"ruleId":"278","severity":1,"message":"282","line":4,"column":9,"nodeType":"280","messageId":"281","endLine":4,"endColumn":13},{"ruleId":"285","severity":1,"message":"294","line":14,"column":9,"nodeType":"280","endLine":14,"endColumn":18,"suggestions":"295"},{"ruleId":"285","severity":1,"message":"291","line":14,"column":19,"nodeType":"292","endLine":22,"endColumn":10},{"ruleId":"285","severity":1,"message":"296","line":28,"column":11,"nodeType":"287","endLine":28,"endColumn":24,"suggestions":"297"},{"ruleId":"283","severity":1,"message":"284","line":194,"column":48,"nodeType":"270","endLine":194,"endColumn":143},{"ruleId":"283","severity":1,"message":"284","line":77,"column":37,"nodeType":"270","endLine":77,"endColumn":123},{"ruleId":"278","severity":1,"message":"282","line":4,"column":9,"nodeType":"280","messageId":"281","endLine":4,"endColumn":13},{"ruleId":"285","severity":1,"message":"294","line":13,"column":5,"nodeType":"280","endLine":13,"endColumn":14,"suggestions":"298"},{"ruleId":"285","severity":1,"message":"291","line":13,"column":15,"nodeType":"292","endLine":21,"endColumn":6},{"ruleId":"285","severity":1,"message":"296","line":27,"column":7,"nodeType":"287","endLine":27,"endColumn":20,"suggestions":"299"},{"ruleId":"283","severity":1,"message":"284","line":189,"column":48,"nodeType":"270","endLine":189,"endColumn":143},{"ruleId":"278","severity":1,"message":"300","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":12},{"ruleId":"268","severity":1,"message":"269","line":102,"column":29,"nodeType":"270","endLine":102,"endColumn":113},{"ruleId":"278","severity":1,"message":"279","line":1,"column":16,"nodeType":"280","messageId":"281","endLine":1,"endColumn":24},{"ruleId":"278","severity":1,"message":"300","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":12},{"ruleId":"283","severity":1,"message":"284","line":55,"column":37,"nodeType":"270","endLine":55,"endColumn":86},{"ruleId":"268","severity":1,"message":"269","line":18,"column":33,"nodeType":"270","endLine":18,"endColumn":117},{"ruleId":"278","severity":1,"message":"301","line":1,"column":10,"nodeType":"280","messageId":"281","endLine":1,"endColumn":13},{"ruleId":"285","severity":1,"message":"302","line":38,"column":6,"nodeType":"287","endLine":38,"endColumn":15,"suggestions":"303"},{"ruleId":"304","severity":1,"message":"305","line":48,"column":19,"nodeType":"306","messageId":"307","endLine":48,"endColumn":21},{"ruleId":"308","severity":1,"message":"309","line":1,"column":1,"nodeType":"310","endLine":5,"endColumn":2},{"ruleId":"278","severity":1,"message":"311","line":1,"column":8,"nodeType":"280","messageId":"281","endLine":1,"endColumn":13},{"ruleId":"278","severity":1,"message":"312","line":3,"column":9,"nodeType":"280","messageId":"281","endLine":3,"endColumn":20},{"ruleId":"278","severity":1,"message":"313","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":19},{"ruleId":"285","severity":1,"message":"314","line":61,"column":7,"nodeType":"287","endLine":61,"endColumn":9,"suggestions":"315"},{"ruleId":"285","severity":1,"message":"316","line":95,"column":7,"nodeType":"287","endLine":95,"endColumn":15,"suggestions":"317"},{"ruleId":"278","severity":1,"message":"318","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":13},{"ruleId":"278","severity":1,"message":"319","line":19,"column":12,"nodeType":"280","messageId":"281","endLine":19,"endColumn":20},{"ruleId":"285","severity":1,"message":"320","line":142,"column":7,"nodeType":"287","endLine":142,"endColumn":15,"suggestions":"321"},{"ruleId":"278","severity":1,"message":"318","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":13},{"ruleId":"278","severity":1,"message":"319","line":20,"column":12,"nodeType":"280","messageId":"281","endLine":20,"endColumn":20},{"ruleId":"285","severity":1,"message":"322","line":115,"column":7,"nodeType":"287","endLine":115,"endColumn":15,"suggestions":"323"},{"ruleId":"278","severity":1,"message":"318","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":13},{"ruleId":"278","severity":1,"message":"319","line":20,"column":10,"nodeType":"280","messageId":"281","endLine":20,"endColumn":18},{"ruleId":"285","severity":1,"message":"324","line":108,"column":5,"nodeType":"287","endLine":108,"endColumn":13,"suggestions":"325"},{"ruleId":"285","severity":1,"message":"326","line":82,"column":7,"nodeType":"287","endLine":82,"endColumn":15,"suggestions":"327"},{"ruleId":"328","severity":1,"message":"329","line":52,"column":19,"nodeType":"330","messageId":"331","endLine":54,"endColumn":21},{"ruleId":"328","severity":1,"message":"329","line":56,"column":19,"nodeType":"330","messageId":"331","endLine":56,"endColumn":28},{"ruleId":"285","severity":1,"message":"332","line":85,"column":7,"nodeType":"287","endLine":85,"endColumn":15,"suggestions":"333"},"no-native-reassign",["334"],"no-negated-in-lhs",["335"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.","ArrayExpression",["336"],"React Hook useEffect contains a call to 'setUserType'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [state, userType] as a second argument to the useEffect Hook.",["337"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'createFilterOptions' is defined but never used.","React Hook useEffect contains a call to 'setCropId'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [params, cropId] as a second argument to the useEffect Hook.",["338"],"React Hook useEffect has missing dependencies: 'cropId' and 'searchHandler'. Either include them or remove the dependency array.",["339"],["340"],["341"],"'swal' is defined but never used.","'set' is defined but never used.","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",["342"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'React' is defined but never used.","'AuthContext' is defined but never used.","'getUserData' is defined but never used.","React Hook useEffect has a missing dependency: 'values.email'. Either include it or remove the dependency array.",["343"],"React Hook useEffect has missing dependencies: 'isSubmitting', 'values.address', 'values.phoneNo', 'values.pincode', and 'values.username'. Either include them or remove the dependency array.",["344"],"'axios' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isSubmitting' and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["345"],"React Hook useEffect has missing dependencies: 'cropId', 'isSubmitting', 'setSearch', 'values.address', 'values.cropName', 'values.description', 'values.pincode', 'values.price', and 'values.weight'. Either include them or remove the dependency array. If 'setSearch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["346"],"React Hook useEffect has missing dependencies: 'cropId', 'isSubmitting', and 'setSearch'. Either include them or remove the dependency array. If 'setSearch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["347"],"React Hook useEffect has missing dependencies: 'callback', 'dispatch', 'isSubmitting', 'userType', 'values.email', 'values.password', 'values.phoneNo', and 'values.username'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["348"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","React Hook useEffect has missing dependencies: 'callback', 'dispatch', 'isSubmitting', 'userType', 'values.email', and 'values.password'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["349"],"no-global-assign","no-unsafe-negation",{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"354","fix":"358"},{"desc":"356","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},"Update the dependencies array to be: [dispatch, hamburger, state]",{"range":"376","text":"377"},"Add dependencies array: [state, userType]",{"range":"378","text":"379"},"Add dependencies array: [params, cropId]",{"range":"380","text":"381"},"Update the dependencies array to be: [cropId, paramCropId, searchHandler]",{"range":"382","text":"383"},{"range":"384","text":"381"},{"range":"385","text":"383"},"Update the dependencies array to be: [count, counter]",{"range":"386","text":"387"},"Update the dependencies array to be: [values.email]",{"range":"388","text":"389"},"Update the dependencies array to be: [errors, isSubmitting, values.address, values.phoneNo, values.pincode, values.username]",{"range":"390","text":"391"},"Update the dependencies array to be: [errors, isSubmitting, values]",{"range":"392","text":"393"},"Update the dependencies array to be: [cropId, errors, isSubmitting, setSearch, values.address, values.cropName, values.description, values.pincode, values.price, values.weight]",{"range":"394","text":"395"},"Update the dependencies array to be: [cropId, errors, isSubmitting, setSearch]",{"range":"396","text":"397"},"Update the dependencies array to be: [callback, dispatch, errors, isSubmitting, userType, values.email, values.password, values.phoneNo, values.username]",{"range":"398","text":"399"},"Update the dependencies array to be: [callback, dispatch, errors, isSubmitting, userType, values.email, values.password]",{"range":"400","text":"401"},[644,655],"[dispatch, hamburger, state]",[920,920],", [state, userType]",[733,733],", [params, cropId]",[850,863],"[cropId, paramCropId, searchHandler]",[687,687],[784,797],[1013,1022],"[count, counter]",[1605,1607],"[values.email]",[2616,2624],"[errors, isSubmitting, values.address, values.phoneNo, values.pincode, values.username]",[3693,3701],"[errors, isSubmitting, values]",[3023,3031],"[cropId, errors, isSubmitting, setSearch, values.address, values.cropName, values.description, values.pincode, values.price, values.weight]",[2575,2583],"[cropId, errors, isSubmitting, setSearch]",[2488,2496],"[callback, dispatch, errors, isSubmitting, userType, values.email, values.password, values.phoneNo, values.username]",[2608,2616],"[callback, dispatch, errors, isSubmitting, userType, values.email, values.password]"]